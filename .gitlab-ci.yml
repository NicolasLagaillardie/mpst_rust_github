# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust: latest"

stages:
  - start
  - fmt
  - check
  - clippy
  - build
  - doc
  - run
  - test
  - bench

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# services:
#   - mysql: latest
#   - redis: latest
#   - postgres: latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
before_script:
  - apt-get update -yqq
  - apt-get install -yqq --no-install-recommends build-essential

# Use cargo to test the project
start:
  script:
    - rustc --version && cargo --version  # Print version info for debugging
fmt:
  script:
    - cargo fmt --verbose
check:
  script:
    - cargo check --verbose --all
    - cargo check --examples --verbose
    - cargo check --benches --verbose
    - cargo check --tests --verbose
clippy:
  script:
    - cargo clippy --verbose --all
    # - cargo clippy --examples --verbose
    # - cargo clippy --benches --verbose
    # - cargo clippy --tests --verbose
build:
  script:
    - cargo build --verbose --all
    - cargo build --examples --verbose
    - cargo build --benches --verbose
    - cargo build --tests --verbose
doc:
  script:
    - cargo doc --verbose --all
run:
  script:
    - cargo run --all-features --verbose
    - ./scripts/full_examples.sh
test:
  script:
    - cargo test --workspace --verbose
    - cargo test --verbose --all
    - cargo test --verbose --all -- --nocapture
    - cargo test --verbose --all --no-default-features --no-run
bench:
  script:
    - cargo bench --verbose --all

sast:
  stage: test
include:
  - template: Security/SAST.gitlab-ci.yml
