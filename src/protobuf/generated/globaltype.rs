// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `globaltype.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq, Clone, Default, Debug)]
// @@protoc_insertion_point(message:Action)
pub struct Action {
    // message fields
    // @@protoc_insertion_point(field:Action.idx)
    pub idx: i32,
    // @@protoc_insertion_point(field:Action.type)
    pub type_: ::protobuf::EnumOrUnknown<action::ActionType>,
    // @@protoc_insertion_point(field:Action.from_role)
    pub from_role: ::std::string::String,
    // @@protoc_insertion_point(field:Action.to_role)
    pub to_role: ::std::string::String,
    // @@protoc_insertion_point(field:Action.continuations)
    pub continuations: ::std::vec::Vec<action::Index>,
    // @@protoc_insertion_point(field:Action.clock)
    pub clock: ::std::string::String,
    // @@protoc_insertion_point(field:Action.lower_bound)
    pub lower_bound: i64,
    // @@protoc_insertion_point(field:Action.include_lb)
    pub include_lb: bool,
    // @@protoc_insertion_point(field:Action.upper_bound)
    pub upper_bound: i64,
    // @@protoc_insertion_point(field:Action.include_ub)
    pub include_ub: bool,
    // @@protoc_insertion_point(field:Action.reset_clock)
    pub reset_clock: bool,
    // special fields
    // @@protoc_insertion_point(special_field:Action.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Action {
    fn default() -> &'a Action {
        <Action as ::protobuf::Message>::default_instance()
    }
}

impl Action {
    pub fn new() -> Action {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "idx",
            |m: &Action| { &m.idx },
            |m: &mut Action| { &mut m.idx },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Action| { &m.type_ },
            |m: &mut Action| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from_role",
            |m: &Action| { &m.from_role },
            |m: &mut Action| { &mut m.from_role },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to_role",
            |m: &Action| { &m.to_role },
            |m: &mut Action| { &mut m.to_role },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "continuations",
            |m: &Action| { &m.continuations },
            |m: &mut Action| { &mut m.continuations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "clock",
            |m: &Action| { &m.clock },
            |m: &mut Action| { &mut m.clock },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lower_bound",
            |m: &Action| { &m.lower_bound },
            |m: &mut Action| { &mut m.lower_bound },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "include_lb",
            |m: &Action| { &m.include_lb },
            |m: &mut Action| { &mut m.include_lb },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "upper_bound",
            |m: &Action| { &m.upper_bound },
            |m: &mut Action| { &mut m.upper_bound },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "include_ub",
            |m: &Action| { &m.include_ub },
            |m: &mut Action| { &mut m.include_ub },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reset_clock",
            |m: &Action| { &m.reset_clock },
            |m: &mut Action| { &mut m.reset_clock },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Action>(
            "Action",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Action {
    const NAME: &'static str = "Action";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.idx = is.read_int32()?;
                },
                16 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.from_role = is.read_string()?;
                },
                34 => {
                    self.to_role = is.read_string()?;
                },
                42 => {
                    self.continuations.push(is.read_message()?);
                },
                50 => {
                    self.clock = is.read_string()?;
                },
                56 => {
                    self.lower_bound = is.read_int64()?;
                },
                64 => {
                    self.include_lb = is.read_bool()?;
                },
                72 => {
                    self.upper_bound = is.read_int64()?;
                },
                80 => {
                    self.include_ub = is.read_bool()?;
                },
                88 => {
                    self.reset_clock = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.idx != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.idx);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(action::ActionType::SEND) {
            my_size += ::protobuf::rt::int32_size(2, self.type_.value());
        }
        if !self.from_role.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.from_role);
        }
        if !self.to_role.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.to_role);
        }
        for value in &self.continuations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.clock.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.clock);
        }
        if self.lower_bound != 0 {
            my_size += ::protobuf::rt::int64_size(7, self.lower_bound);
        }
        if self.include_lb != false {
            my_size += 1 + 1;
        }
        if self.upper_bound != 0 {
            my_size += ::protobuf::rt::int64_size(9, self.upper_bound);
        }
        if self.include_ub != false {
            my_size += 1 + 1;
        }
        if self.reset_clock != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.idx != 0 {
            os.write_int32(1, self.idx)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(action::ActionType::SEND) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.from_role.is_empty() {
            os.write_string(3, &self.from_role)?;
        }
        if !self.to_role.is_empty() {
            os.write_string(4, &self.to_role)?;
        }
        for v in &self.continuations {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if !self.clock.is_empty() {
            os.write_string(6, &self.clock)?;
        }
        if self.lower_bound != 0 {
            os.write_int64(7, self.lower_bound)?;
        }
        if self.include_lb != false {
            os.write_bool(8, self.include_lb)?;
        }
        if self.upper_bound != 0 {
            os.write_int64(9, self.upper_bound)?;
        }
        if self.include_ub != false {
            os.write_bool(10, self.include_ub)?;
        }
        if self.reset_clock != false {
            os.write_bool(11, self.reset_clock)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Action {
        Action::new()
    }

    fn clear(&mut self) {
        self.idx = 0;
        self.type_ = ::protobuf::EnumOrUnknown::new(action::ActionType::SEND);
        self.from_role.clear();
        self.to_role.clear();
        self.continuations.clear();
        self.clock.clear();
        self.lower_bound = 0;
        self.include_lb = false;
        self.upper_bound = 0;
        self.include_ub = false;
        self.reset_clock = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Action {
        static instance: Action = Action {
            idx: 0,
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            from_role: ::std::string::String::new(),
            to_role: ::std::string::String::new(),
            continuations: ::std::vec::Vec::new(),
            clock: ::std::string::String::new(),
            lower_bound: 0,
            include_lb: false,
            upper_bound: 0,
            include_ub: false,
            reset_clock: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Action {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Action").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Action {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Action {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Action`
pub mod action {
    #[derive(PartialEq, Clone, Default, Debug)]
    // @@protoc_insertion_point(message:Action.Index)
    pub struct Index {
        // message fields
        // @@protoc_insertion_point(field:Action.Index.label)
        pub label: ::std::string::String,
        // @@protoc_insertion_point(field:Action.Index.next)
        pub next: i32,
        // special fields
        // @@protoc_insertion_point(special_field:Action.Index.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Index {
        fn default() -> &'a Index {
            <Index as ::protobuf::Message>::default_instance()
        }
    }

    impl Index {
        pub fn new() -> Index {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "label",
                |m: &Index| { &m.label },
                |m: &mut Index| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "next",
                |m: &Index| { &m.next },
                |m: &mut Index| { &mut m.next },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Index>(
                "Action.Index",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Index {
        const NAME: &'static str = "Index";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.label = is.read_string()?;
                    },
                    16 => {
                        self.next = is.read_int32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.label.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.label);
            }
            if self.next != 0 {
                my_size += ::protobuf::rt::int32_size(2, self.next);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.label.is_empty() {
                os.write_string(1, &self.label)?;
            }
            if self.next != 0 {
                os.write_int32(2, self.next)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Index {
            Index::new()
        }

        fn clear(&mut self) {
            self.label.clear();
            self.next = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Index {
            static instance: Index = Index {
                label: ::std::string::String::new(),
                next: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Index {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Action.Index").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Index {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Index {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
    // @@protoc_insertion_point(enum:Action.ActionType)
    pub enum ActionType {
        // @@protoc_insertion_point(enum_value:Action.ActionType.SEND)
        SEND = 0,
        // @@protoc_insertion_point(enum_value:Action.ActionType.RECV)
        RECV = 1,
    }

    impl ::protobuf::Enum for ActionType {
        const NAME: &'static str = "ActionType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ActionType> {
            match value {
                0 => ::std::option::Option::Some(ActionType::SEND),
                1 => ::std::option::Option::Some(ActionType::RECV),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ActionType] = &[
            ActionType::SEND,
            ActionType::RECV,
        ];
    }

    impl ::protobuf::EnumFull for ActionType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Action.ActionType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ActionType {
        fn default() -> Self {
            ActionType::SEND
        }
    }

    impl ActionType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ActionType>("Action.ActionType")
        }
    }
}

#[derive(PartialEq, Clone, Default, Debug)]
// @@protoc_insertion_point(message:GlobalType)
pub struct GlobalType {
    // message fields
    // @@protoc_insertion_point(field:GlobalType.start)
    pub start: i32,
    // @@protoc_insertion_point(field:GlobalType.actions)
    pub actions: ::std::vec::Vec<Action>,
    // special fields
    // @@protoc_insertion_point(special_field:GlobalType.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GlobalType {
    fn default() -> &'a GlobalType {
        <GlobalType as ::protobuf::Message>::default_instance()
    }
}

impl GlobalType {
    pub fn new() -> GlobalType {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start",
            |m: &GlobalType| { &m.start },
            |m: &mut GlobalType| { &mut m.start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "actions",
            |m: &GlobalType| { &m.actions },
            |m: &mut GlobalType| { &mut m.actions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GlobalType>(
            "GlobalType",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GlobalType {
    const NAME: &'static str = "GlobalType";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.start = is.read_int32()?;
                },
                18 => {
                    self.actions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.start != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.start);
        }
        for value in &self.actions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.start != 0 {
            os.write_int32(1, self.start)?;
        }
        for v in &self.actions {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GlobalType {
        GlobalType::new()
    }

    fn clear(&mut self) {
        self.start = 0;
        self.actions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GlobalType {
        static instance: GlobalType = GlobalType {
            start: 0,
            actions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GlobalType {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GlobalType").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GlobalType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GlobalType {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10globaltype.proto\"\xb9\x03\n\x06Action\x12\x10\n\x03idx\x18\x01\
    \x20\x01(\x05R\x03idx\x12&\n\x04type\x18\x02\x20\x01(\x0e2\x12.Action.Ac\
    tionTypeR\x04type\x12\x1b\n\tfrom_role\x18\x03\x20\x01(\tR\x08fromRole\
    \x12\x17\n\x07to_role\x18\x04\x20\x01(\tR\x06toRole\x123\n\rcontinuation\
    s\x18\x05\x20\x03(\x0b2\r.Action.IndexR\rcontinuations\x12\x14\n\x05cloc\
    k\x18\x06\x20\x01(\tR\x05clock\x12\x1f\n\x0blower_bound\x18\x07\x20\x01(\
    \x03R\nlowerBound\x12\x1d\n\ninclude_lb\x18\x08\x20\x01(\x08R\tincludeLb\
    \x12\x1f\n\x0bupper_bound\x18\t\x20\x01(\x03R\nupperBound\x12\x1d\n\ninc\
    lude_ub\x18\n\x20\x01(\x08R\tincludeUb\x12\x1f\n\x0breset_clock\x18\x0b\
    \x20\x01(\x08R\nresetClock\x1a1\n\x05Index\x12\x14\n\x05label\x18\x01\
    \x20\x01(\tR\x05label\x12\x12\n\x04next\x18\x02\x20\x01(\x05R\x04next\"\
    \x20\n\nActionType\x12\x08\n\x04SEND\x10\0\x12\x08\n\x04RECV\x10\x01\"E\
    \n\nGlobalType\x12\x14\n\x05start\x18\x01\x20\x01(\x05R\x05start\x12!\n\
    \x07actions\x18\x02\x20\x03(\x0b2\x07.ActionR\x07actionsJ\xbd\x08\n\x06\
    \x12\x04\0\0\x1b\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\
    \x04\x02\0\x16\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x0e\n\x0c\n\x04\
    \x04\0\x03\0\x12\x04\x03\x02\x06\x03\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\
    \x03\n\x0f\n\r\n\x06\x04\0\x03\0\x02\0\x12\x03\x04\x04\x15\n\x0e\n\x07\
    \x04\0\x03\0\x02\0\x05\x12\x03\x04\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x01\x12\x03\x04\x0b\x10\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x04\
    \x13\x14\n\r\n\x06\x04\0\x03\0\x02\x01\x12\x03\x05\x04\x13\n\x0e\n\x07\
    \x04\0\x03\0\x02\x01\x05\x12\x03\x05\x04\t\n\x0e\n\x07\x04\0\x03\0\x02\
    \x01\x01\x12\x03\x05\n\x0e\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03\
    \x05\x11\x12\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x02\x10\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x07\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\
    \x08\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x07\x0e\x0f\n\x0c\n\x04\x04\
    \0\x04\0\x12\x04\x08\x02\x0b\x03\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x08\
    \x07\x11\n\r\n\x06\x04\0\x04\0\x02\0\x12\x03\t\x04\r\n\x0e\n\x07\x04\0\
    \x04\0\x02\0\x01\x12\x03\t\x04\x08\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\
    \x03\t\x0b\x0c\n\r\n\x06\x04\0\x04\0\x02\x01\x12\x03\n\x04\r\n\x0e\n\x07\
    \x04\0\x04\0\x02\x01\x01\x12\x03\n\x04\x08\n\x0e\n\x07\x04\0\x04\0\x02\
    \x01\x02\x12\x03\n\x0b\x0c\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0c\x02\x16\
    \n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0c\x02\x0c\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x0c\r\x11\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0c\x14\
    \x15\n\x0b\n\x04\x04\0\x02\x02\x12\x03\r\x02\x17\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\r\t\x12\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\r\x15\x16\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03\x0e\x02\x15\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0e\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0e\t\x10\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x0e\x13\x14\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0f\
    \x02#\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x0f\x02\n\n\x0c\n\x05\x04\0\
    \x02\x04\x06\x12\x03\x0f\x0b\x10\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\
    \x0f\x11\x1e\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0f!\"\n\x0b\n\x04\
    \x04\0\x02\x05\x12\x03\x10\x02\x13\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\
    \x10\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x10\t\x0e\n\x0c\n\x05\
    \x04\0\x02\x05\x03\x12\x03\x10\x11\x12\n\x0b\n\x04\x04\0\x02\x06\x12\x03\
    \x11\x02\x18\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x11\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x06\x01\x12\x03\x11\x08\x13\n\x0c\n\x05\x04\0\x02\x06\x03\
    \x12\x03\x11\x16\x17\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x12\x02\x16\n\x0c\
    \n\x05\x04\0\x02\x07\x05\x12\x03\x12\x02\x06\n\x0c\n\x05\x04\0\x02\x07\
    \x01\x12\x03\x12\x07\x11\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x12\x14\
    \x15\n\x0b\n\x04\x04\0\x02\x08\x12\x03\x13\x02\x18\n\x0c\n\x05\x04\0\x02\
    \x08\x05\x12\x03\x13\x02\x07\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x13\
    \x08\x13\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x13\x16\x17\n\x0b\n\x04\
    \x04\0\x02\t\x12\x03\x14\x02\x17\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03\x14\
    \x02\x06\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\x14\x07\x11\n\x0c\n\x05\x04\
    \0\x02\t\x03\x12\x03\x14\x14\x16\n\x0b\n\x04\x04\0\x02\n\x12\x03\x15\x02\
    \x18\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03\x15\x02\x06\n\x0c\n\x05\x04\0\
    \x02\n\x01\x12\x03\x15\x07\x12\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03\x15\
    \x15\x17\n\n\n\x02\x04\x01\x12\x04\x18\0\x1b\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x18\x08\x12\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x19\x02\x12\n\x0c\
    \n\x05\x04\x01\x02\0\x05\x12\x03\x19\x02\x07\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x19\x08\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x19\x10\x11\
    \n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1a\x02\x1e\n\x0c\n\x05\x04\x01\x02\
    \x01\x04\x12\x03\x1a\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x1a\
    \x0b\x11\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1a\x12\x19\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x1a\x1c\x1db\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Action::generated_message_descriptor_data());
            messages.push(GlobalType::generated_message_descriptor_data());
            messages.push(action::Index::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(action::ActionType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
